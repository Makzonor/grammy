
Todo
==================================================

###  : Error report and hooks
#### : zero or more x: ~x
###  : AST Node naming & reordering: use '^', '<=>' ?
##   : support Regexp as rules
###  : GrammySpec: SpecFramework for grammars: expectations for acceptance and generated AST
#    : Validate Grammar:
		- check for left recursion
		- check for never matching rules: ~a >> a (BNF: a* a) #=> never matches
#    : optional rules: :a >> [(',' >> :a)+] # change [x,y] from alternative to optional
##   : Make constants accessible in grammar definition dsl
##   : support exceptions: x: ('a'..'z')*3 - 'lol'
#    : Conceptual Deficit: Grammar.define doesnt just define a grammar, it implicitly defines a parser too
##   : track linenumbers for error report and compilation (semantic action?)
##   : give tokens a name: :ident.name
##   : Make predefined parsers available: use :string, :int, :float
##   : automatically check for valid identifiers: insert identifiers into table and check identifiers against that table
##   : automatically map matched input/strings to values by a symbol table
#    : Optimize: stream[..] returns a copy that is only read and then garbage collected
#    : Analyze grammar: potential ambiguities etc; style tips: +:asd? => *:asd
##   : Turn debugging on and of?
###  : Rename Rule etc to Parser
##   : Error recognition/handling: disallow backtracking in some cases: '&' instead of '>>' ?
##   : EOS parser
##   : Skipper before and after token?

Done
==================================================
#### : Ignore/skip parser: whitespaces & comments
##   : Make DSL removable: alias_method, remove_method etc
#### : one or more: +x
#### : optional rules: :identifier?
###  : Add logger and convert puts to debug messages
##   : Shortcut for: a >> (',' >> a)*;
		- a % ','
		- a / ','
		- list(a,',') or list?(a,',') #=> chosen list(a,',')
