
Todo
==================================================
###  : On SyntaxError insert an error node in the AST tree
##   : Predicates: Positive and Negative Lookahead (read without consuming)
###  : ParseContext: LineNumber calculation: precalculate indices of linebreaks
#    : Maybe use Aquarium for logging with AOP. Or for less dependencies: Rule#match does logging, Rule#match_impl does the real matching
###  : Let multiple rules with same name define alternatives: rule a: 'x'; rule a: 'y'; #=> == rule a: 'x' | 'y'
###  : Error report, hooks and skipping incorrect tokens
###  : list(:rule) ast transformation: :rule >> ~(',' >> :rule) #=> array of ast nodes
##   : transformations: rule x: +:digit, map: ->(node){ Integer(node.data) }
###  : AST Node naming & reordering: use '^', '<=>' ?
##   : support Regexp as rules
###  : GrammySpec: SpecFramework for grammars: expectations for acceptance and generated AST
		- yaml file with match expectations: full/partial/no match
		- yaml file with error expectations: line, column
#    : Validate Grammar:
		- check for left recursion
		- check for never matching rules: ~a >> a (BNF: a* a) #=> never matches, (:a? | :b?) #=> always matches first
		- nested token rules?
##   : Make constants accessible in grammar definition dsl
##   : support exceptions: x: ('a'..'z')*3 - 'lol'
##   : give tokens a name/id for ast tree: :ident.name, :ident[:name]
##   : Make predefined parsers available: use :string, :int, :float
##   : automatically check for valid identifiers: insert identifiers into table and check identifiers against that table
#    : Analyze grammar: potential ambiguities etc; style tips: +:asd? => ~:asd
##   : Skipper before and after token? only in sequence?
##   : Rule.to_s #=> (a >> b) | c
#    : nice to have: 1..9 instead of '1'..'9'
?    : optional rules: :a >> [(',' >> :a)+] # change [x,y] => alternative?, [x] => optional
###  : Use ruby-graphviz to output the Grammar: grammar.to_image('grammar')
###  : Match anything: :a >> ~any >> :b
##   : Skipper class which wraps a rule
#    : grammar.to_s #=> list rules and skippers


Done
==================================================
###  : support multiple skippers and ability to chose individual skipper for each rule.
##   : Add Rule-Option 'debug' (Bool). Anonymous rules should have debug=false and named rules debug = true
###  : callback 'modify_ast': modify_ast: lambda{|node| ... and return node }
#### : new names for rule options: merging_nodes, generating_ast, using_skipper
#### : pass options to rule: rule a: 'a', helper: true, skipping: false
##   : Custom rspec matchers: should fully_match('a','b',...) etc in spec/support
###  : Optional rules should only generate ast node when they match something.
##   : Error recognition/handling: disallow backtracking: '&' instead of '>>'
##   : track linenumbers for error report and compilation (semantic action?)
#### : ParserContext: stores line number, current line, head position, stream, symbol table, etc
##   : Seperate files for rules
###  : Add Rule#parent and Rule#root
###  : fragment = no skipping + helper
###  : Make name for a grammar optional: g = Grammy.define do ... end
###  : Use ruby-graphviz to output the AST: ast.to_image('ast')
#### : zero or more x: ~x
##   : Turn debugging on and off? grammar.parse("...", debug: true)
##   : EOS parser
#### : Ignore/skip parser: whitespaces & comments
##   : Make DSL removable: alias_method, remove_method etc
#### : one or more: +x
#### : optional rules: :identifier?
###  : Add logger and convert puts to debug messages
##   : Shortcut for: a >> (',' >> a)*;
		- a % ','
		- a / ','
		- list(a,',') or list?(a,',') #=> chosen list(a,',')

Dropped
==================================================

